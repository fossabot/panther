// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatusCount status count
// swagger:model StatusCount
type StatusCount struct {

	// error
	// Minimum: 0
	Error *int64 `json:"error,omitempty"`

	// fail
	// Minimum: 0
	Fail *int64 `json:"fail,omitempty"`

	// pass
	// Minimum: 0
	Pass *int64 `json:"pass,omitempty"`
}

// Validate validates this status count
func (m *StatusCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusCount) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if err := validate.MinimumInt("error", "body", int64(*m.Error), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *StatusCount) validateFail(formats strfmt.Registry) error {

	if swag.IsZero(m.Fail) { // not required
		return nil
	}

	if err := validate.MinimumInt("fail", "body", int64(*m.Fail), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *StatusCount) validatePass(formats strfmt.Registry) error {

	if swag.IsZero(m.Pass) { // not required
		return nil
	}

	if err := validate.MinimumInt("pass", "body", int64(*m.Pass), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusCount) UnmarshalBinary(b []byte) error {
	var res StatusCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
