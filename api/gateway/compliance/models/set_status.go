// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetStatus set status
// swagger:model SetStatus
type SetStatus struct {

	// error message
	ErrorMessage ErrorMessage `json:"errorMessage,omitempty"`

	// integration Id
	// Required: true
	IntegrationID IntegrationID `json:"integrationId"`

	// policy Id
	// Required: true
	PolicyID PolicyID `json:"policyId"`

	// policy severity
	// Required: true
	PolicySeverity PolicySeverity `json:"policySeverity"`

	// resource Id
	// Required: true
	ResourceID ResourceID `json:"resourceId"`

	// resource type
	// Required: true
	ResourceType ResourceType `json:"resourceType"`

	// status
	// Required: true
	Status Status `json:"status"`

	// suppressed
	// Required: true
	Suppressed Suppressed `json:"suppressed"`
}

// Validate validates this set status
func (m *SetStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicySeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetStatus) validateErrorMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorMessage) { // not required
		return nil
	}

	if err := m.ErrorMessage.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errorMessage")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validateIntegrationID(formats strfmt.Registry) error {

	if err := m.IntegrationID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("integrationId")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validatePolicyID(formats strfmt.Registry) error {

	if err := m.PolicyID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policyId")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validatePolicySeverity(formats strfmt.Registry) error {

	if err := m.PolicySeverity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policySeverity")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validateResourceID(formats strfmt.Registry) error {

	if err := m.ResourceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceId")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validateResourceType(formats strfmt.Registry) error {

	if err := m.ResourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceType")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *SetStatus) validateSuppressed(formats strfmt.Registry) error {

	if err := m.Suppressed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("suppressed")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetStatus) UnmarshalBinary(b []byte) error {
	var res SetStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
