// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnitTest unit test
// swagger:model UnitTest
type UnitTest struct {

	// expected result
	// Required: true
	ExpectedResult TestExpectedResult `json:"expectedResult"`

	// name
	// Required: true
	Name TestName `json:"name"`

	// resource
	// Required: true
	Resource TestResource `json:"resource"`

	// resource type
	// Required: true
	ResourceType TestResourceType `json:"resourceType"`
}

// Validate validates this unit test
func (m *UnitTest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectedResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnitTest) validateExpectedResult(formats strfmt.Registry) error {

	if err := m.ExpectedResult.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expectedResult")
		}
		return err
	}

	return nil
}

func (m *UnitTest) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *UnitTest) validateResource(formats strfmt.Registry) error {

	if err := m.Resource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *UnitTest) validateResourceType(formats strfmt.Registry) error {

	if err := m.ResourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnitTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnitTest) UnmarshalBinary(b []byte) error {
	var res UnitTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
