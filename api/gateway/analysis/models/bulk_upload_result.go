// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUploadResult bulk upload result
// swagger:model BulkUploadResult
type BulkUploadResult struct {

	// modified policies
	// Required: true
	// Minimum: 0
	ModifiedPolicies *int64 `json:"modifiedPolicies"`

	// modified rules
	// Required: true
	// Minimum: 0
	ModifiedRules *int64 `json:"modifiedRules"`

	// new policies
	// Required: true
	// Minimum: 0
	NewPolicies *int64 `json:"newPolicies"`

	// new rules
	// Required: true
	// Minimum: 0
	NewRules *int64 `json:"newRules"`

	// total policies
	// Required: true
	// Minimum: 0
	TotalPolicies *int64 `json:"totalPolicies"`

	// total rules
	// Required: true
	// Minimum: 0
	TotalRules *int64 `json:"totalRules"`
}

// Validate validates this bulk upload result
func (m *BulkUploadResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiedPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUploadResult) validateModifiedPolicies(formats strfmt.Registry) error {

	if err := validate.Required("modifiedPolicies", "body", m.ModifiedPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("modifiedPolicies", "body", int64(*m.ModifiedPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateModifiedRules(formats strfmt.Registry) error {

	if err := validate.Required("modifiedRules", "body", m.ModifiedRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("modifiedRules", "body", int64(*m.ModifiedRules), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateNewPolicies(formats strfmt.Registry) error {

	if err := validate.Required("newPolicies", "body", m.NewPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("newPolicies", "body", int64(*m.NewPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateNewRules(formats strfmt.Registry) error {

	if err := validate.Required("newRules", "body", m.NewRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("newRules", "body", int64(*m.NewRules), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateTotalPolicies(formats strfmt.Registry) error {

	if err := validate.Required("totalPolicies", "body", m.TotalPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalPolicies", "body", int64(*m.TotalPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateTotalRules(formats strfmt.Registry) error {

	if err := validate.Required("totalRules", "body", m.TotalRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalRules", "body", int64(*m.TotalRules), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUploadResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUploadResult) UnmarshalBinary(b []byte) error {
	var res BulkUploadResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
