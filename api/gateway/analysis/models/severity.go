// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Severity Policy severity
// swagger:model severity
type Severity string

const (

	// SeverityINFO captures enum value "INFO"
	SeverityINFO Severity = "INFO"

	// SeverityLOW captures enum value "LOW"
	SeverityLOW Severity = "LOW"

	// SeverityMEDIUM captures enum value "MEDIUM"
	SeverityMEDIUM Severity = "MEDIUM"

	// SeverityHIGH captures enum value "HIGH"
	SeverityHIGH Severity = "HIGH"

	// SeverityCRITICAL captures enum value "CRITICAL"
	SeverityCRITICAL Severity = "CRITICAL"
)

// for schema
var severityEnum []interface{}

func init() {
	var res []Severity
	if err := json.Unmarshal([]byte(`["INFO","LOW","MEDIUM","HIGH","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		severityEnum = append(severityEnum, v)
	}
}

func (m Severity) validateSeverityEnum(path, location string, value Severity) error {
	if err := validate.Enum(path, location, value, severityEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this severity
func (m Severity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
