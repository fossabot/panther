// Code generated by go-swagger; DO NOT EDIT.

package models

/**
 * Copyright 2020 Panther Labs Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestPolicyResult test policy result
// swagger:model TestPolicyResult
type TestPolicyResult struct {

	// test summary
	// Required: true
	TestSummary TestSummary `json:"testSummary"`

	// tests errored
	// Required: true
	TestsErrored TestsErrored `json:"testsErrored"`

	// tests failed
	// Required: true
	TestsFailed TestsFailed `json:"testsFailed"`

	// tests passed
	// Required: true
	TestsPassed TestsPassed `json:"testsPassed"`
}

// Validate validates this test policy result
func (m *TestPolicyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTestSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestsErrored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestsFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestsPassed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPolicyResult) validateTestSummary(formats strfmt.Registry) error {

	if err := m.TestSummary.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("testSummary")
		}
		return err
	}

	return nil
}

func (m *TestPolicyResult) validateTestsErrored(formats strfmt.Registry) error {

	if err := validate.Required("testsErrored", "body", m.TestsErrored); err != nil {
		return err
	}

	if err := m.TestsErrored.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("testsErrored")
		}
		return err
	}

	return nil
}

func (m *TestPolicyResult) validateTestsFailed(formats strfmt.Registry) error {

	if err := validate.Required("testsFailed", "body", m.TestsFailed); err != nil {
		return err
	}

	if err := m.TestsFailed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("testsFailed")
		}
		return err
	}

	return nil
}

func (m *TestPolicyResult) validateTestsPassed(formats strfmt.Registry) error {

	if err := validate.Required("testsPassed", "body", m.TestsPassed); err != nil {
		return err
	}

	if err := m.TestsPassed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("testsPassed")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPolicyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPolicyResult) UnmarshalBinary(b []byte) error {
	var res TestPolicyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
