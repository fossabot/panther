AWSTemplateFormatVersion: 2010-09-09
Description: The networking resources that can be used by load balancer & ECS related services

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/24
    PublicOne:
      CIDR: 10.0.0.0/26
    PublicTwo:
      CIDR: 10.0.0.64/26

Resources:
  # A VPC that will be used by our stack's security group, added to our web-service
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]

  # We define a public subnet so that we can access our web server from a public IP. The empty
  # string in !GetAZs is equivalent to AWS::Region
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicOne, CIDR]
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicTwo, CIDR]
      MapPublicIpOnLaunch: true

  # The lines below setup networking resources for the public subnets. Containers in the public
  # subnets have public IP addresses and the routing table sends network traffic via the IG.
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the public Internet Gateway to our VPC
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Define a route table in order to map & route IP addresses
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Because we have a public VPC, we need to map 0.0.0.0/0 through an Internet Gateway in order
  # to be out there in the network
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the route table that we have created (with the mapping right above) to our public
  # subnets in order to be used by it
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC
  SubnetOneId:
    Description: The ID of the public subnet one
    Value: !Ref PublicSubnetOne
  SubnetTwoId:
    Description: The ID of the public subnet two
    Value: !Ref PublicSubnetTwo
